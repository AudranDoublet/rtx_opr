#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "../rng.h"
#include "../constants.h"

#define G_UNIFORM_INC_NV
#define G_UNIFORM_SET 0
#include "../global_uniforms.h"
#undef G_UNIFORM_SET
#undef G_UNIFORM_INC_NV

#define G_CACHE_SET 1
#include "../global_caches.h"
#undef G_CACHE_SET

#include "../shading.h"
#include "../payloads.h"
layout(location = PAYLOAD_IDX_GENERAL)  rayPayloadNV InitialPayload PAYLOAD_GENERAL;
layout(location = PAYLOAD_IDX_SHADOWED) rayPayloadNV bool           PAYLOAD_SHADOWED;

bool isShadowed(vec3 origin) {
    PAYLOAD_SHADOWED = true;

    traceNV(
        UNI_TLAS,
        gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsSkipClosestHitShaderNV, 0xff,
        1, 0, 1,
        origin, 0.00, -UNI_SUN.direction, 200.0,
        PAYLOAD_IDX_SHADOWED
    );

    return PAYLOAD_SHADOWED;
}

vec3 sampleBrdfSpecular(
        in out uint seed,
        const vec3 origin,
        const vec3 N,
        const vec3 mer,
        const vec3 V,
        const vec3 specularColor
    ) {
    float roughness = max(mer.z, 0.02);
    float alpha = roughness*roughness;

    const mat3 basis = construct_ONB_frisvad(N);
    const vec2 rnd = vec2(noise(seed), noise(seed));

    vec3 H = sampleGGXVNDF(rnd, alpha, V, basis);
    vec3 L = normalize(reflect(V, H));

    float NoV = max(0, -dot(N, V));
    float NoL = max(0, dot(N, L));

    if (NoL == 0 || NoV == 0) {
        return vec3(0);
    }

    const vec3 F = fresnelSchlick(max(0, dot(-V, H)), specularColor, mer.x);

    traceNV(
        UNI_TLAS,
        gl_RayFlagsNoneNV, 0xff,
        0, 0, 0,
        origin, 0.0, L, 200.0,
        PAYLOAD_IDX_GENERAL
    );

    vec3 Li = PAYLOAD_GENERAL.illumination;
    if (PAYLOAD_GENERAL.hit) {
        Li *= vec3(sunIllum(PAYLOAD_GENERAL.normal));
        if (isShadowed(PAYLOAD_GENERAL.hit_position)) {
            Li = vec3(0);
        }
        Li += PAYLOAD_GENERAL.mer.g * PAYLOAD_GENERAL.illumination * 2.0;
    } 

    // G2(V, L)/G1(V) = (G1(V) * G1(L))/G1(V) = G1(L)
    return (specularColor / C_PI + F * G1_GGX(roughness, NoL)) * Li * NoL;
}

const uint N_SAMPLES_SPECULAR = 1;

void main() {
    const ivec2 xy = ivec2(gl_LaunchIDNV.xy);
    float seed_f = imageLoad(CACHE_NOISE, xy).r * 1024.;
    uint seed = uint(seed_f);

    vec3 specular = vec3(0);
    vec3 normal = imageLoad(CACHE_NORMALS, xy).xyz;

    if (normal != vec3(0)) {
        const vec3 origin = imageLoad(CACHE_ORIGIN, xy).xyz;
        const vec3 V = normalize(origin - vec3(UNI_CAMERA.origin.xyz));
        const vec3 mer = imageLoad(CACHE_ILLUM_COEFFS, xy).rgb;
        const vec3 surfaceColor = imageLoad(CACHE_BLOCK_COLOR, xy).rgb;

        for (int i = 0; i < N_SAMPLES_SPECULAR; i++) {
            specular += sampleBrdfSpecular(
                seed,
                origin,
                normal,
                mer,
                V,
                surfaceColor
            );
        }

        specular /= N_SAMPLES_SPECULAR;
    }

    imageStore(CACHE_PT_SPECULAR, xy, vec4(specular, 0.0));
}
