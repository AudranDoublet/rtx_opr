#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#define G_UNIFORM_INC_NV
#define G_UNIFORM_SET 0
#include "../global_uniforms.h"
#undef G_UNIFORM_SET
#undef G_UNIFORM_INC_NV

#define G_CACHE_SET 1
#include "../global_caches.h"
#undef G_CACHE_SET

#include "../payloads.h"
#include "../shading.h"

layout(location = PAYLOAD_IDX_GENERAL) rayPayloadNV InitialPayload PAYLOAD_GENERAL;


void main() {
    const ivec2 xy = ivec2(gl_LaunchIDNV.xy);
    dvec2 xy_normalized = -(xy / dvec2(gl_LaunchSizeNV.xy) - 0.5) * 2;

    const dvec3 origin = UNI_CAMERA.origin.xyz;
    const dvec4 seen_point = (UNI_CAMERA.screen_to_world * dvec4(xy_normalized, 1, 1));
    const dvec3 direction = normalize(seen_point.xyz / seen_point.w - origin);

    const uint cullMask = 0xff;
    const float tmin = 0.1;
    const float tmax = 200.0;

    traceNV(
        UNI_TLAS,
        gl_RayFlagsNoneNV,
        cullMask, 0, 0, 0,
        vec3(origin), tmin, vec3(direction), tmax,
        PAYLOAD_IDX_GENERAL
    );

    vec3 directIllum;

    if (PAYLOAD_GENERAL.hit) {
        vec3 diffuse;
        vec3 specular;
        float NoL;
        diffuseBurleySun(
            PAYLOAD_GENERAL.hit_position, 
            PAYLOAD_GENERAL.normal, 
            PAYLOAD_GENERAL.mer.b,
            diffuse, 
            specular,
            NoL);
        vec3 surfaceColor = PAYLOAD_GENERAL.illumination;

        diffuse = surfaceColor * (1 - specular);
        specular = mix(vec3(1), surfaceColor, PAYLOAD_GENERAL.mer.r) * specular;

        directIllum = sunIllum(PAYLOAD_GENERAL.normal) * composeColor(
            diffuse,
            specular,
            NoL
        );


        // directIllum = PAYLOAD_GENERAL.mer;

        imageStore(CACHE_NORMALS, xy, vec4(PAYLOAD_GENERAL.normal, 0.0));
        imageStore(CACHE_INIT_DISTANCES, xy, vec4(PAYLOAD_GENERAL.distance));
        imageStore(CACHE_ORIGIN, xy, vec4(PAYLOAD_GENERAL.hit_position, 0.0));
        imageStore(CACHE_ILLUM_COEFFS, xy, vec4(PAYLOAD_GENERAL.mer, 0.0));
    } else {
        directIllum = PAYLOAD_GENERAL.illumination;

        imageStore(CACHE_NORMALS, xy, vec4(0));
        imageStore(CACHE_INIT_DISTANCES, xy, vec4(0.0));
        imageStore(CACHE_ORIGIN, xy, vec4(origin + direction, 1.0));
        imageStore(CACHE_ILLUM_COEFFS, xy, vec4(0));
    }

    imageStore(CACHE_DIRECT_ILLUM, xy, vec4(directIllum, 0.0));
}
