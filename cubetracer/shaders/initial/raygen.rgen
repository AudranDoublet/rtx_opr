#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "payload.h"

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0) uniform Uniforms {
    vec3 forward;
    vec3 left;
    vec3 up;
    vec3 origin;
} camera;

layout(binding = 0, set = 1, rgba8) uniform image2D image;
layout(binding = 1, set = 1, rgba32f) uniform image2D normals;
layout(binding = 2, set = 1, r32f) uniform image2D initial_distances;
layout(binding = 3, set = 1, rgba32f) uniform image2D direct_illumination;
layout(binding = 4, set = 1, rgba32f) uniform image2D hit_positions;
layout(binding = 6, set = 1, rgba32f) uniform image2D illum_coeffs;

layout(location = 0) rayPayloadNV InitialPayload payload;

void main() {
    vec2 pos = vec2(gl_LaunchIDNV.xy) / vec2(gl_LaunchSizeNV.xy) - 0.5;

    const vec3 origin = camera.origin;
    const vec3 direction = normalize(
        camera.forward
        - pos.x * camera.left
        + pos.y * camera.up
    );

    const uint cullMask = 0xff;
    const float tmin = 0.1;
    const float tmax = 200.0;

    traceNV(topLevelAS, gl_RayFlagsNoneNV, cullMask, 0, 0, 0, origin, tmin, direction, tmax, 0);

    const ivec2 xy = ivec2(gl_LaunchIDNV.xy);

    if (payload.hit) {
        imageStore(normals, xy, vec4(payload.normal, 0.0));
        imageStore(initial_distances, xy, vec4(payload.distance));
        imageStore(hit_positions, xy, vec4(payload.hit_position, 0.0));
        imageStore(illum_coeffs, xy, vec4(payload.mer, 0.0));
    } else {
        imageStore(normals, xy, vec4(0));
        imageStore(initial_distances, xy, vec4(0.0));
        imageStore(hit_positions, xy, vec4(0));
        imageStore(illum_coeffs, xy, vec4(0));
    }

    imageStore(direct_illumination, xy, vec4(payload.illumination, 0.0));
}
